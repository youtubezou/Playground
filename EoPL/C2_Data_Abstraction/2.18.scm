(define (number->sequence n) (list n '() '()))
(define (current-element x) (car x))
(define (left x) (cadr x))
(define (right x) (caddr x))

(define (move-to-left x)
  (if (null? (left x))
      (error 'move-to-left "Left is empty.")
      (list (car (left x))
            (cdr (left x))
            (cons (current-element x)
                  (right x)))))

(define (move-to-right x)
  (if (null? (right x))
      (error 'move-to-right "Right is empty.")
      (list (car (right x))
            (cons (current-element x)
                  (left x))
            (cdr (right x)))))

(define (insert-to-left v x)
  (list (current-element x) (cons v (left x)) (right x)))

(define (insert-to-right v x)
  (list (current-element x) (left x) (cons v (right x))))

(equal? (number->sequence 7)
        '(7 () ()))
(equal? (current-element '(6 (5 4 3 2 1) (7 8 9)))
        6)
(equal? (move-to-left '(6 (5 4 3 2 1) (7 8 9)))
        '(5 (4 3 2 1) (6 7 8 9)))
(equal? (move-to-right '(6 (5 4 3 2 1) (7 8 9)))
        '(7 (6 5 4 3 2 1) (8 9)))
(equal? (insert-to-left 13 '(6 (5 4 3 2 1) (7 8 9)))
        '(6 (13 5 4 3 2 1) (7 8 9)))
(equal? (insert-to-right 13 '(6 (5 4 3 2 1) (7 8 9)))
        '(6 (5 4 3 2 1) (13 7 8 9)))
