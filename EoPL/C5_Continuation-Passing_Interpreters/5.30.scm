(require eopl)

; BEGIN: Scanner
(define scanner-spec
  '((white-sp (whitespace) skip)
    (comment ("%" (arbno (not #\newline))) skip)
    (identifier (letter (arbno (or letter digit))) symbol)
    (number (digit (arbno digit)) number)
    (number ("-" digit (arbno digit)) number)))

(define scan&parse
  (sllgen:make-string-parser scanner-spec grammar))

(define-datatype program program?
  (a-program
   (stat statement?)))

(define (value-of-program pgm)
  (cases program pgm
    (a-program (stat)
               (set! global-cont (end-cont))
               (set! global-stat stat)
               (set! global-env (empty-env))
               (trampoline (result-of/k)))))

(define (run prog)
  (initialize-store!)
  (value-of-program (scan&parse prog)))

; BEGIN: Bounce
(define-datatype bounce bounce?
  (final-answer (val expval?))
  (inter-bounce (proc procedure?)))

(define (trampoline b)
  (cases bounce b
    (final-answer (val) val)
    (inter-bounce (proc)
                  (trampoline (proc)))))

; BEGIN: Value type
(define (identifier? x)
  (symbol? x))

(define (reference? v)
  (integer? v))

(define-datatype expval expval?
  (num-val
   (num number?))
  (bool-val
   (bool boolean?))
  (list-val
   (lst list?))
  (proc-val
   (proc proc?))
  (ref-val
   (ref reference?)))

(define expval->num
  (lambda (val)
    (cases expval val
      (num-val (num) num)
      (else (error 'num val)))))

(define expval->bool
  (lambda (val)
    (cases expval val
      (bool-val (bool) bool)
      (else (error 'bool val)))))

(define expval->proc
  (lambda (val)
    (cases expval val
      (proc-val (proc) proc)
      (else (error 'proc val)))))

(define expval->list
  (lambda (val)
    (cases expval val
      (list-val (lst) lst)
      (else (error 'list val)))))

(define expval->ref
  (lambda (val)
    (cases expval val
      (ref-val (ref) ref)
      (else (error 'ref val)))))

(define expval->val
  (lambda (val)
    (cases expval val
      (num-val (num) num)
      (bool-val (bool) bool)
      (list-val (lst)
                (map (lambda (val) (expval->val val)) lst))
      (proc-val (proc) proc)
      (ref-val (ref) (list 'ref ref)))))

; BEGIN: Store
(define (store? x)
  ((list-of expval?) x))

(define (empty-store)
  (make-vector 0))

(define the-store 'uninitialized)

(define (get-store) the-store)

(define (initialize-store!)
  (set! the-store (empty-store)))

(define (newref val)
  (let* ((next-ref (vector-length the-store))
         (next-store (make-vector (+ next-ref 1) val)))
    (define (newref-rec idx)
      (if (equal? idx next-ref)
          0
          (begin (vector-set! next-store idx (vector-ref the-store idx))
                 (newref-rec (+ idx 1)))))
    (newref-rec 0)
    (set! the-store next-store)
    next-ref))

(define (deref ref)
  (vector-ref the-store ref))

(define (setref! ref val)
  (vector-set! the-store ref val)
  ref)

; BEGIN: Global
(define global-exp 'uninitialized)
(define global-stat 'uninitialized)
(define global-env 'uninitialized)
(define global-cont 'uninitialized)
(define global-val 'uninitialized)
(define global-proc 'uninitialized)

; BEGIN: Environment
(define-datatype environment environment?
  (empty-env)
  (extend-env-ref
   (var identifier?)
   (ref reference?)
   (old-env environment?)))

(define (apply-env-ref env search-var)
  (cases environment env
    (empty-env ()
               (error 'apply-env-ref "Unbound variable." search-var))
    (extend-env-ref (var ref old-env)
                    (if (eqv? search-var var)
                        ref
                        (apply-env-ref old-env search-var)))))

(define (apply-env-val env var)
  (deref (apply-env-ref env var)))

(define (extend-env-val var val old-env)
  (extend-env-ref var (newref val) old-env))

(define (extend-env-vals vars vals env)
  (if (null? vars)
      env
      (extend-env-vals (cdr vars) (cdr vals) (extend-env-val (car vars) (car vals) env))))

(define (extend-env-rec names varss exps old-env)
  (let ((next-env (extend-env-vals names
                                   (build-list (length names) (lambda (x) 'undefined))
                                   old-env)))
    (define (extend-env-rec-sub names varss exps)
      (if (null? names)
          next-env
          (let* ((ref (apply-env-ref next-env (car names)))
                 (proc (procedure (car varss) (car exps) next-env)))
            (setref! ref (proc-val proc))
            (extend-env-rec-sub (cdr names) (cdr varss) (cdr exps)))))
    (extend-env-rec-sub names varss exps)))

(define (extend-env-sub name vars stat old-env)
  (let* ((next-env (extend-env-val name 'undefined old-env))
         (ref (apply-env-ref next-env name))
         (sub (subroutine vars stat next-env)))
    (setref! ref (proc-val sub))
    next-env))

; BEGIN: Grammar
(define grammar
  '((program (statement) a-program)
    (expression (number) const-exp)
    (expression (identifier) var-exp)
    (expression ("+" "(" expression "," expression ")") add-exp)
    (expression ("-" "(" expression "," expression ")") sub-exp)
    (expression ("*" "(" expression "," expression ")") mul-exp)
    (expression ("/" "(" expression "," expression ")") div-exp)
    (expression ("zero?" "(" expression ")") zero?-exp)
    (expression ("equal?" "(" expression "," expression ")") equal?-exp)
    (expression ("less?" "(" expression "," expression ")") less?-exp)
    (expression ("greater?" "(" expression "," expression ")") greater?-exp)
    (expression ("if" expression "then" expression "else" expression) if-exp)
    (expression ("cons" "(" expression "," expression ")") cons-exp)
    (expression ("car" "(" expression ")") car-exp)
    (expression ("cdr" "(" expression ")") cdr-exp)
    (expression ("list" "(" (arbno expression) ")") list-exp)
    (expression ("null?" "(" expression ")") null?-exp)
    (expression ("emptylist") emptylist-exp)
    (expression ("let" (arbno identifier "=" expression) "in" expression) let-exp)
    (expression ("letrec" (arbno identifier "(" (arbno identifier) ")" "=" expression)
                 "in" expression) letrec-exp)
    (expression ("ref" identifier) ref-exp)
    (expression ("newref" "(" expression ")") newref-exp)
    (expression ("deref" "(" expression ")") deref-exp)
    (expression ("setref" "(" expression "," expression ")") setref-exp)
    (expression ("set" identifier "=" expression) set-exp)
    (expression ("begin" (separated-list expression ";") "end") begin-exp) 
    (expression ("proc" "(" (arbno identifier) ")" expression) proc-exp)
    (expression ("(" expression (arbno expression) ")") call-exp)
    (statement (identifier "=" expression) assign-stat)
    (statement ("print" expression) print-stat)
    (statement ("read" identifier) read-stat)
    (statement ("{" (separated-list statement ";") "}") seq-stat)
    (statement ("if" expression statement statement) if-stat)
    (statement ("while" expression statement) while-stat)
    (statement ("do" statement "while" expression) dowhile-stat)
    (statement ("sub" identifier "(" (arbno identifier) ")" statement "end" statement) sub-stat)
    (statement ("var" (separated-list identifier ",") ";" statement) var-stat)))

; BEGIN: Expression
(define-datatype expression expression?
  (const-exp (num number?))
  (var-exp (var identifier?))
  (add-exp (exp1 expression?)
           (exp2 expression?))
  (sub-exp (exp1 expression?)
           (exp2 expression?))
  (mul-exp (exp1 expression?)
           (exp2 expression?))
  (div-exp (exp1 expression?)
           (exp2 expression?))
  (zero?-exp (exp expression?))
  (equal?-exp (exp1 expression?)
              (exp2 expression?))
  (less?-exp (exp1 expression?)
             (exp2 expression?))
  (greater?-exp (exp1 expression?)
                (exp2 expression?))
  (if-exp (cond expression?)
          (exp-t expression?)
          (exp-f expression?))
  (cons-exp (exp1 expression?)
            (exp2 expression?))
  (car-exp (exp expression?))
  (cdr-exp (exp expression?))
  (list-exp (exps (list-of expression?)))
  (null?-exp (exp expression?))
  (emptylist-exp)
  (let-exp (vars (list-of identifier?))
           (exps (list-of expression?))
           (body expression?))
  (letrec-exp (names (list-of identifier?))
              (varss (list-of (list-of identifier?)))
              (exps (list-of expression?))
              (body expression?))
  (ref-exp (var identifier?))
  (newref-exp (exp expression?))
  (deref-exp (var expression?))
  (setref-exp (var expression?)
              (exp expression?))
  (set-exp (var identifier?)
           (exp expression?))
  (begin-exp (exps (list-of expression?)))
  (proc-exp (vars (list-of identifier?))
            (body expression?))
  (call-exp (rator expression?)
            (rands (list-of expression?))))

; BEGIN: Statement
(define-datatype statement statement?
  (assign-stat (var identifier?)
               (exp expression?))
  (print-stat (exp expression?))
  (read-stat (var identifier?))
  (seq-stat (stat (list-of statement?)))
  (if-stat (cond expression?)
           (stat-t statement?)
           (stat-f statement?))
  (while-stat (cond expression?)
              (stat statement?))
  (dowhile-stat (stat statement?)
                (cond expression?))
  (sub-stat (name identifier?)
            (vars (list-of identifier?))
            (stat1 statement?)
            (stat2 statement?))
  (var-stat (vars (list-of identifier?))
            (stat statement?)))

; BEGIN: Continuation
(define-datatype continuation continuation?
  (dual-1-cont (op procedure?)
               (exp2 expression?)
               (env environment?)
               (saved-cont continuation?))
  (dual-2-cont (op procedure?)
               (val1 expval?)
               (saved-cont continuation?))
  (compare-1-cont (op procedure?)
                  (exp2 expression?)
                  (env environment?)
                  (saved-cont continuation?))
  (compare-2-cont (op procedure?)
                  (val1 expval?)
                  (saved-cont continuation?))
  (zero?-cont (saved-cont continuation?))
  (if-cont (exp-t expression?)
           (exp-f expression?)
           (env environment?)
           (saved-cont continuation?))
  (cons-1-cont (exp2 expression?)
               (env environment?)
               (saved-cont continuation?))
  (cons-2-cont (val1 expval?)
               (saved-cont continuation?))
  (car-cont (saved-cont continuation?))
  (cdr-cont (saved-cont continuation?))
  (list-cont (exps (list-of expression?))
             (vals (list-of expval?))
             (env environment?)
             (saved-cont continuation?))
  (null?-cont (saved-cont continuation?))
  (let-cont (vars (list-of identifier?))
            (exps (list-of expression?))
            (vals (list-of expval?))
            (body expression?)
            (env environment?)
            (saved-cont continuation?))
  (newref-cont (saved-cont continuation?))
  (deref-cont (saved-cont continuation?))
  (setref-1-cont (exp expression?)
                 (env environment?)
                 (saved-cont continuation?))
  (setref-2-cont (var expval?)
                 (saved-cont continuation?))
  (set-cont (ref reference?)
            (saved-cont continuation?))
  (begin-cont (exps (list-of expression?))
              (env environment?)
              (saved-cont continuation?))
  (rator-cont (rands (list-of expression?))
              (env environment?)
              (saved-cont continuation?))
  (rands-cont (rator expval?)
              (rands (list-of expression?))
              (vals (list-of expval?))
              (env environment?)
              (saved-cont continuation?))
  (assign-stat-cont (ref reference?)
                    (saved-cont continuation?))
  (print-stat-cont (saved-cont continuation?))
  (seq-stat-cont (stats (list-of statement?))
                 (env environment?)
                 (saved-cont continuation?))
  (if-stat-cont (stat-t statement?)
                (stat-f statement?)
                (env environment?)
                (saved-cont continuation?))
  (while-1-stat-cont (exp expression?)
                     (stat statement?)
                     (env environment?)
                     (saved-cont continuation?))
  (while-2-stat-cont (exp expression?)
                     (stat statement?)
                     (env environment?)
                     (saved-cont continuation?))
  (end-cont))

(define (apply-cont)
  (cases continuation global-cont
    (dual-1-cont (op exp2 env saved-cont)
                 (let ((val1 global-val))
                   (set! global-exp exp2)
                   (set! global-cont (dual-2-cont op val1 saved-cont))
                   (value-of/k)))
    (dual-2-cont (op val1 saved-cont)
                 (let ((val2 global-val))
                   (let ((num1 (expval->num val1))
                         (num2 (expval->num val2)))
                     (set! global-cont saved-cont)
                     (set! global-val (num-val (op num1 num2)))
                     (apply-cont))))
    (compare-1-cont (op exp2 env saved-cont)
                    (let ((val1 global-val))
                      (set! global-exp exp2)
                      (set! global-cont (compare-2-cont op val1 saved-cont))
                      (value-of/k)))
    (compare-2-cont (op val1 saved-cont)
                    (let ((val2 global-val))
                      (let ((num1 (expval->num val1))
                            (num2 (expval->num val2)))
                        (set! global-cont saved-cont)
                        (set! global-val (bool-val (op num1 num2)))
                        (apply-cont))))
    (zero?-cont (saved-cont)
                (set! global-cont saved-cont)
                (set! global-val (bool-val (zero? (expval->num global-val))))
                (apply-cont))
    (if-cont (exp-t exp-f env saved-cont)
             (if (expval->bool global-val)
                 (set! global-exp exp-t)
                 (set! global-exp exp-f))
             (set! global-cont saved-cont)
             (value-of/k))
    (cons-1-cont (exp2 env saved-cont)
                 (let ((val1 global-val))
                   (set! global-exp exp2)
                   (set! global-cont (cons-2-cont val1 saved-cont))
                   (value-of/k)))
    (cons-2-cont (val1 saved-cont)
                 (let ((val2 global-val))
                   (set! global-cont saved-cont)
                   (set! global-val (list-val (cons val1 (expval->list val2))))
                   (apply-cont)))
    (car-cont (saved-cont)
              (set! global-cont saved-cont)
              (set! global-val (car (expval->list global-val)))
              (apply-cont))
    (cdr-cont (saved-cont)
              (set! global-cont saved-cont)
              (set! global-val (list-val (cdr (expval->list global-val))))
              (apply-cont))
    (list-cont (exps vals env saved-cont)
               (let ((next-val (cons global-val vals)))
                 (if (null? exps)
                     (begin (set! global-cont saved-cont)
                            (set! global-val (list-val (reverse next-val)))
                            (apply-cont))
                     (begin (set! global-exp (car exps))
                            (set! global-cont (list-cont (cdr exps) next-val env saved-cont))
                            (value-of/k)))))
    (null?-cont (saved-cont)
                (set! global-cont saved-cont)
                (set! global-val (bool-val (null? (expval->list global-val))))
                (apply-cont))
    (let-cont (vars exps vals body env saved-cont)
              (let ((next-val (cons global-val vals)))
                (if (null? exps)
                    (begin (set! global-exp body)
                           (set! global-env (extend-env-vals vars (reverse next-val) env))
                           (set! global-cont saved-cont)
                           (value-of/k))
                    (begin (set! global-exp (car exps))
                           (set! global-cont (let-cont vars (cdr exps)
                                                       next-val
                                                       body env saved-cont))
                           (value-of/k)))))
    (newref-cont (saved-cont)
                 (let ((ref (newref global-val)))
                   (set! global-cont saved-cont)
                   (set! global-val (ref-val ref))
                   (apply-cont)))
    (deref-cont (saved-cont)
                (let ((real-val (deref (expval->ref global-val))))
                  (set! global-cont saved-cont)
                  (set! global-val real-val)
                  (apply-cont)))
    (set-cont (ref saved-cont)
              (setref! ref global-val)
              (set! global-cont saved-cont)
              (apply-cont))
    (setref-1-cont (exp env saved-cont)
                   (set! global-exp exp)
                   (set! global-cont (setref-2-cont global-val saved-cont))
                   (value-of/k))
    (setref-2-cont (var saved-cont)
                   (begin (setref! (expval->ref var) global-val)
                          (set! global-cont saved-cont))
                          (apply-cont))
    (begin-cont (exps env saved-cont)
                (if (null? exps)
                    (begin (set! global-cont saved-cont)
                           (apply-cont))
                    (begin (set! global-exp (car exps))
                           (set! global-cont (begin-cont (cdr exps) env saved-cont))
                           (value-of/k))))
    (rator-cont (rands env saved-cont)
                (if (null? rands)
                    (begin (set! global-proc (expval->proc global-val))
                           (set! global-val '())
                           (set! global-cont saved-cont)
                           (apply-procedure/k))
                    (begin (set! global-exp (car rands))
                           (set! global-cont (rands-cont global-val (cdr rands) '() env saved-cont))
                           (value-of/k))))
    (rands-cont (rator rands vals env saved-cont)
                (let ((next-val (cons global-val vals)))
                  (if (null? rands)
                      (begin (set! global-proc (expval->proc rator))
                             (set! global-val (reverse next-val))
                             (set! global-cont saved-cont)
                             (apply-procedure/k))
                      (begin (set! global-exp (car rands))
                             (set! global-cont (rands-cont rator (cdr rands)
                                                              next-val env saved-cont))
                             (value-of/k)))))
    (assign-stat-cont (ref saved-cont)
                      (setref! ref global-val)
                      (set! global-cont saved-cont)
                      (apply-cont))
    (print-stat-cont (saved-cont)
                     (display (expval->val global-val))
                     (display "\n")
                     (set! global-cont saved-cont)
                     (apply-cont))
    (seq-stat-cont (stats env saved-cont)
                   (if (null? stats)
                       (begin (set! global-cont saved-cont)
                              (apply-cont))
                       (begin (set! global-stat (car stats))
                              (set! global-cont (seq-stat-cont (cdr stats) env saved-cont))
                              (result-of/k))))
    (if-stat-cont (stat-t stat-f env saved-cont)
                  (if (expval->bool global-val)
                      (set! global-stat stat-t)
                      (set! global-stat stat-f))
                  (set! global-cont saved-cont)
                  (result-of/k))
    (while-1-stat-cont (exp stat env saved-cont)
                       (if (expval->bool global-val)
                           (begin (set! global-stat stat)
                                  (set! global-cont (while-2-stat-cont exp stat env saved-cont))
                                  (result-of/k))
                           (begin (set! global-cont saved-cont)
                                  (apply-cont))))
    (while-2-stat-cont (exp stat env saved-cont)
                       (set! global-exp exp)
                       (set! global-cont (while-1-stat-cont exp stat env saved-cont))
                       (value-of/k))
    (end-cont ()
              (final-answer global-val))))

; BEGIN: Procedure
(define-datatype proc proc?
  (procedure (vars (list-of identifier?))
             (body expression?)
             (saved-env environment?))
  (subroutine (vars (list-of identifier?))
              (body statement?)
              (saved-env environment?)))

(define (apply-procedure/k)
  (inter-bounce
   (lambda () 
     (cases proc global-proc
       (procedure (vars body saved-env)
                  (set! global-exp body)
                  (set! global-env (extend-env-vals vars global-val global-env))
                  (value-of/k))
       (subroutine (vars body saved-env)
                   (set! global-stat body)
                   (set! global-env (extend-env-vals vars global-val global-env))
                   (result-of/k))))))

; BEGIN: Evaluation
(define (value-of/k)
  (cases expression global-exp
    (const-exp (num)
               (set! global-val (num-val num))
               (apply-cont))
    (var-exp (var)
             (set! global-val (apply-env-val global-env var))
             (apply-cont))
    (add-exp (exp1 exp2)
             (set! global-exp exp1)
             (set! global-cont (dual-1-cont + exp2 global-env global-cont))
             (value-of/k))
    (sub-exp (exp1 exp2)
             (set! global-exp exp1)
             (set! global-cont (dual-1-cont - exp2 global-env global-cont))
             (value-of/k))
    (mul-exp (exp1 exp2)
             (set! global-exp exp1)
             (set! global-cont (dual-1-cont * exp2 global-env global-cont))
             (value-of/k))
    (div-exp (exp1 exp2)
             (set! global-exp exp1)
             (set! global-cont (dual-1-cont / exp2 global-env global-cont))
             (value-of/k))
    (zero?-exp (exp)
               (set! global-exp exp)
               (set! global-cont (zero?-cont global-cont))
               (value-of/k))
    (equal?-exp (exp1 exp2)
                (set! global-exp exp1)
                (set! global-cont (compare-1-cont = exp2 global-env global-cont))
                (value-of/k))
    (less?-exp (exp1 exp2)
               (set! global-exp exp1)
               (set! global-cont (compare-1-cont < exp2 global-env global-cont))
               (value-of/k))
    (greater?-exp (exp1 exp2)
                  (set! global-exp exp1)
                  (set! global-cont (compare-1-cont > exp2 global-env global-cont))
                  (value-of/k))
    (if-exp (cond exp-t exp-f)
            (set! global-exp cond)
            (set! global-cont (if-cont exp-t exp-f global-env global-cont))
            (value-of/k))
    (cons-exp (exp1 exp2)
              (set! global-exp exp1)
              (set! global-cont (cons-1-cont exp2 global-env global-cont))
              (value-of/k))
    (car-exp (exp)
             (set! global-exp exp)
             (set! global-cont (car-cont global-cont))
             (value-of/k))
    (cdr-exp (exp)
             (set! global-exp exp)
             (set! global-cont (cdr-cont global-cont))
             (value-of/k))
    (list-exp (exps)
              (if (null? exps)
                  (begin (set! global-val (list-val '()))
                         (apply-cont))
                  (begin (set! global-exp (car exps))
                         (set! global-cont (list-cont (cdr exps) '() global-env global-cont))
                         (value-of/k))))
    (null?-exp (exp)
               (set! global-exp exp)
               (set! global-cont (null?-cont global-cont))
               (value-of/k))
    (emptylist-exp ()
                   (set! global-val (list-val '()))
                   (apply-cont))
    (let-exp (vars exps body)
             (if (null? vars)
                 (begin (set! global-exp body)
                        (value-of/k))
                 (begin (set! global-exp (car exps))
                        (set! global-cont (let-cont vars (cdr exps) '() body global-env global-cont))
                        (value-of/k))))
    (letrec-exp (names varss exps body)
                (set! global-exp body)
                (set! global-env (extend-env-rec names varss exps global-env))
                (value-of/k))
    (ref-exp (var)
             (set! global-val (ref-val (apply-env-ref global-env var)))
             (apply-cont))
    (newref-exp (exp)
                (set! global-exp exp)
                (set! global-cont (newref-cont global-cont))
                (value-of/k))
    (deref-exp (var)
               (set! global-exp var)
               (set! global-cont (deref-cont global-cont))
               (value-of/k))
    (setref-exp (var exp)
                (set! global-exp var)
                (set! global-cont (setref-1-cont exp global-env global-cont))
                (value-of/k))
    (set-exp (var exp)
             (set! global-exp exp)
             (set! global-cont (set-cont (apply-env-ref global-env var) global-cont))
             (value-of/k))
    (begin-exp (exps)
               (set! global-cont (begin-cont exps global-env global-cont))
               (set! global-val (num-val 0))
               (apply-cont))
    (proc-exp (vars body)
              (set! global-val (proc-val (procedure vars body global-env)))
              (apply-cont))
    (call-exp (rator rands)
              (set! global-exp rator)
              (set! global-cont (rator-cont rands global-env global-cont))
              (value-of/k))))

(define (result-of/k)
  (cases statement global-stat
    (assign-stat (var exp)
                 (set! global-exp exp)
                 (set! global-cont (assign-stat-cont (apply-env-ref global-env var) global-cont))
                 (value-of/k))
    (print-stat (exp)
                (set! global-exp exp)
                (set! global-cont (print-stat-cont global-cont))
                (value-of/k))
    (read-stat (exp)
               (set! global-val (num-val (read)))
               (apply-cont))
    (seq-stat (stats)
              (set! global-cont (seq-stat-cont stats global-env global-cont))
              (set! global-val (num-val 0))
              (apply-cont))
    (if-stat (cond stat-t stat-f)
             (set! global-exp cond)
             (set! global-cont (if-stat-cont stat-t stat-f global-env global-cont))
             (value-of/k))
    (while-stat (exp stat)
                (set! global-exp exp)
                (set! global-cont (while-1-stat-cont exp stat global-env global-cont))
                (value-of/k))
    (dowhile-stat (stat exp)
                  (set! global-stat stat)
                  (set! global-cont (while-2-stat-cont exp stat global-env global-cont))
                  (result-of/k))
    (sub-stat (name vars stat1 stat2)
              (set! global-stat stat2)
              (set! global-env (extend-env-sub name vars stat1 global-env))
              (result-of/k))
    (var-stat (vars stat)
              (set! global-stat stat)
              (set! global-env (extend-env-vals vars
                                                (make-list (length vars) (lambda (x) 'undefined))
                                                global-env))
              (result-of/k))))

; BEGIN: Tests
(define (equal?! prog expect)
  (display "Expect: ")
  (display expect)
  (display "\nActual: ")
  (let ((result (run prog)))
    ;(display "===")
    ;(display result)
    ;(display "===\n")
    (let ((actual (expval->val result)))
      (display actual)
      (display "\n")
      (if (equal? actual expect)
          (display "\n")
          (display "Wrong Answer!!\n\n")))))

(define program-global "var dummy; { dummy = 
let fact = proc (n)
               if zero?(n)
               then 1
               else *(n,(fact -(n,1)))
in (fact 5)
}")
(equal?! program-global 120)
